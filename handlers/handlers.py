from contextlib import suppress
from states.crypto import CryptoState
from states.register import RegisterState
from aiogram.fsm.context import FSMContext
from utils.db.storage import DatabaseManager  
from utils.api.fetch_data_api import  get_data
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from utils.api.fetch_data_api import get_crypto_symbols 
from keyboards.default.pagination_kb import Pagination, paginator

db = DatabaseManager("data/database.db")
all_crypts = db.fetchall("SELECT * FROM cryptocurrencies")



async def start_register(message: Message, state: FSMContext):

    """
    set_state –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —Ü–µ–ø–µ–æ—á–∫–µ (–Ω–∞ 1 —à–∞–≥ –Ω–∞–∑–∞–¥, –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è)

    —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—à–µ–≤—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É
    –ù–∞–ø—Ä–∏–º–µ—Ä:

        - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞
        - –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
        -> –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –í–≤–æ–¥ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            -> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞:
                update_data 


    .....–î–µ–π—Å—Ç–≤–∏—è.....–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è....–í–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö....

    """


    db = DatabaseManager("data/database.db")
    users = db.select_user_id(message.from_user.id)


    if users:
        await message.answer(f'{users[-1]}\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º:")
        await state.set_state(RegisterState.regname) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è 


async def register_name(message: Message, state: FSMContext):
    user_name = message.text.capitalize()
    await state.update_data(regname=user_name) # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


    reg_data = await state.get_data() # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    reg_name = reg_data.get("regname") # –≤—ã–±–æ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    msg = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {reg_name}"
    await message.answer(msg)

    db = DatabaseManager("data/database.db") 
    db.add_user(reg_name, message.from_user.id)    
    """
       –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ —Ä–∞–Ω—å—à–µ, —Ç–æ –Ω–µ –≤—ã–π–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–Ω–µ:
            reg_data = await state.get_data() # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö  
            reg_name = reg_data.get("regname") # –≤—ã–±–æ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –∏ –≤–µ—Ä–Ω–µ—Ç—Å—è None 
    
    """
    await state.clear() # –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    

async def show_help_info(message: Message):
    command_list = {
        "/start": "–°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
        "/help": "–í—ã–≤–æ–¥ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥",
        "/description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
    } 
    msg = ""
    for key, value in command_list.items():
        msg += f"{key}: {value}\n"

    await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{msg}") 


async def show_description(message : Message):
    msg = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∫–æ–º–∞–Ω–¥–∞ /start)\n2. –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\t2.1 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\t2.2 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã" 
    await message.answer(msg)

async def pagination_handler(call: CallbackQuery, callback_data: Pagination):

    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(all_crypts) - 1) else page_num

    with suppress(TelegramBadRequest):
        await call.message.edit_text(
            f"{all_crypts[page][0]} <b>{all_crypts[page][1]}</b>",
            reply_markup=paginator(page),
        )

    await call.answer()

async def show_crypto_list(message:Message):
    await message.answer(f"{all_crypts[0][0]}) <b>{all_crypts[0][1]}</b>", reply_markup=paginator())    


async def start_crypto(message: Message, state: FSMContext):
    await state.set_state(CryptoState.crypto_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å\nADAUSDT")


async def get_crypto(message: Message, state: FSMContext):
    crypto_name = message.text.upper()
    await state.update_data(crypto_name=crypto_name)

    data = await state.get_data()
    crypt_s = data.get("crypto_name")
    crypt_data = await get_data(crypt_s)

    if crypt_data is None:  
        await message.answer("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ä–µ –∫–æ—Ä—Ä–µ–∫–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑üòâ")
    else:
        msg = ""
        course_headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã", "–¶–µ–Ω–∞", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∞"]
        for key, value in zip(course_headers, crypt_data.values()):
            msg += f"{key}: {value}\n"

        await message.answer(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{msg}")
        await state.clear()
   


    